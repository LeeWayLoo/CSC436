"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
const source_map_1 = require("source-map");
const loaderUtils = require('loader-utils');
const build_optimizer_1 = require("./build-optimizer");
function buildOptimizerLoader(content, previousSourceMap) {
    this.cacheable();
    const options = loaderUtils.getOptions(this) || {};
    const boOutput = build_optimizer_1.buildOptimizer({ content, emitSourceMap: options.sourceMap });
    const intermediateSourceMap = boOutput.sourceMap;
    let newContent = boOutput.content;
    let newSourceMap;
    if (options.sourceMap && intermediateSourceMap) {
        // Webpack doesn't need sourceMappingURL since we pass them on explicitely.
        newContent = newContent.replace(/^\/\/# sourceMappingURL=[^\r\n]*/gm, '');
        if (!previousSourceMap) {
            // If we're emitting sourcemaps but there is no previous one, then we're the first loader.
            newSourceMap = JSON.stringify(intermediateSourceMap);
        }
        else {
            // If there's a previous sourcemap, we're an intermediate loader and we have to chain them.
            // Fill in the intermediate sourcemap source as the previous sourcemap file.
            intermediateSourceMap.sources = [previousSourceMap.file];
            intermediateSourceMap.file = previousSourceMap.file;
            // Chain the sourcemaps.
            const consumer = new source_map_1.SourceMapConsumer(intermediateSourceMap);
            const generator = source_map_1.SourceMapGenerator.fromSourceMap(consumer);
            generator.applySourceMap(new source_map_1.SourceMapConsumer(previousSourceMap));
            newSourceMap = JSON.stringify(generator.toJSON());
        }
    }
    this.callback(null, newContent, newSourceMap);
}
exports.default = buildOptimizerLoader;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2VicGFjay1sb2FkZXIuanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL2hhbnNsL1NvdXJjZXMvZGV2a2l0LyIsInNvdXJjZXMiOlsicGFja2FnZXMvYW5ndWxhcl9kZXZraXQvYnVpbGRfb3B0aW1pemVyL3NyYy9idWlsZC1vcHRpbWl6ZXIvd2VicGFjay1sb2FkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7Ozs7O0dBTUc7QUFDSCwyQ0FBaUY7QUFFakYsTUFBTSxXQUFXLEdBQUcsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0FBRTVDLHVEQUFtRDtBQU9uRCw4QkFDdUMsT0FBZSxFQUFFLGlCQUErQjtJQUNyRixJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7SUFDakIsTUFBTSxPQUFPLEdBQWdDLFdBQVcsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0lBRWhGLE1BQU0sUUFBUSxHQUFHLGdDQUFjLENBQUMsRUFBRSxPQUFPLEVBQUUsYUFBYSxFQUFFLE9BQU8sQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDO0lBQy9FLE1BQU0scUJBQXFCLEdBQUcsUUFBUSxDQUFDLFNBQVMsQ0FBQztJQUNqRCxJQUFJLFVBQVUsR0FBRyxRQUFRLENBQUMsT0FBTyxDQUFDO0lBRWxDLElBQUksWUFBWSxDQUFDO0lBRWpCLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFTLElBQUkscUJBQXFCLENBQUMsQ0FBQyxDQUFDO1FBQy9DLDJFQUEyRTtRQUMzRSxVQUFVLEdBQUcsVUFBVSxDQUFDLE9BQU8sQ0FBQyxvQ0FBb0MsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUUxRSxFQUFFLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQztZQUN2QiwwRkFBMEY7WUFDMUYsWUFBWSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMscUJBQXFCLENBQUMsQ0FBQztRQUN2RCxDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDTiwyRkFBMkY7WUFDM0YsNEVBQTRFO1lBQzVFLHFCQUFxQixDQUFDLE9BQU8sR0FBRyxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3pELHFCQUFxQixDQUFDLElBQUksR0FBRyxpQkFBaUIsQ0FBQyxJQUFJLENBQUM7WUFFcEQsd0JBQXdCO1lBQ3hCLE1BQU0sUUFBUSxHQUFHLElBQUksOEJBQWlCLENBQUMscUJBQXFCLENBQUMsQ0FBQztZQUM5RCxNQUFNLFNBQVMsR0FBRywrQkFBa0IsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDN0QsU0FBUyxDQUFDLGNBQWMsQ0FBQyxJQUFJLDhCQUFpQixDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQztZQUNuRSxZQUFZLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQztRQUNwRCxDQUFDO0lBQ0gsQ0FBQztJQUVELElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLFVBQVUsRUFBRSxZQUFZLENBQUMsQ0FBQztBQUNoRCxDQUFDO0FBakNELHVDQWlDQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbmltcG9ydCB7IFJhd1NvdXJjZU1hcCwgU291cmNlTWFwQ29uc3VtZXIsIFNvdXJjZU1hcEdlbmVyYXRvciB9IGZyb20gJ3NvdXJjZS1tYXAnO1xuaW1wb3J0ICogYXMgd2VicGFjayBmcm9tICd3ZWJwYWNrJztcbmNvbnN0IGxvYWRlclV0aWxzID0gcmVxdWlyZSgnbG9hZGVyLXV0aWxzJyk7XG5cbmltcG9ydCB7IGJ1aWxkT3B0aW1pemVyIH0gZnJvbSAnLi9idWlsZC1vcHRpbWl6ZXInO1xuXG5cbmludGVyZmFjZSBCdWlsZE9wdGltaXplckxvYWRlck9wdGlvbnMge1xuICBzb3VyY2VNYXA6IGJvb2xlYW47XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJ1aWxkT3B0aW1pemVyTG9hZGVyXG4gICh0aGlzOiB3ZWJwYWNrLmxvYWRlci5Mb2FkZXJDb250ZXh0LCBjb250ZW50OiBzdHJpbmcsIHByZXZpb3VzU291cmNlTWFwOiBSYXdTb3VyY2VNYXApIHtcbiAgdGhpcy5jYWNoZWFibGUoKTtcbiAgY29uc3Qgb3B0aW9uczogQnVpbGRPcHRpbWl6ZXJMb2FkZXJPcHRpb25zID0gbG9hZGVyVXRpbHMuZ2V0T3B0aW9ucyh0aGlzKSB8fCB7fTtcblxuICBjb25zdCBib091dHB1dCA9IGJ1aWxkT3B0aW1pemVyKHsgY29udGVudCwgZW1pdFNvdXJjZU1hcDogb3B0aW9ucy5zb3VyY2VNYXAgfSk7XG4gIGNvbnN0IGludGVybWVkaWF0ZVNvdXJjZU1hcCA9IGJvT3V0cHV0LnNvdXJjZU1hcDtcbiAgbGV0IG5ld0NvbnRlbnQgPSBib091dHB1dC5jb250ZW50O1xuXG4gIGxldCBuZXdTb3VyY2VNYXA7XG5cbiAgaWYgKG9wdGlvbnMuc291cmNlTWFwICYmIGludGVybWVkaWF0ZVNvdXJjZU1hcCkge1xuICAgIC8vIFdlYnBhY2sgZG9lc24ndCBuZWVkIHNvdXJjZU1hcHBpbmdVUkwgc2luY2Ugd2UgcGFzcyB0aGVtIG9uIGV4cGxpY2l0ZWx5LlxuICAgIG5ld0NvbnRlbnQgPSBuZXdDb250ZW50LnJlcGxhY2UoL15cXC9cXC8jIHNvdXJjZU1hcHBpbmdVUkw9W15cXHJcXG5dKi9nbSwgJycpO1xuXG4gICAgaWYgKCFwcmV2aW91c1NvdXJjZU1hcCkge1xuICAgICAgLy8gSWYgd2UncmUgZW1pdHRpbmcgc291cmNlbWFwcyBidXQgdGhlcmUgaXMgbm8gcHJldmlvdXMgb25lLCB0aGVuIHdlJ3JlIHRoZSBmaXJzdCBsb2FkZXIuXG4gICAgICBuZXdTb3VyY2VNYXAgPSBKU09OLnN0cmluZ2lmeShpbnRlcm1lZGlhdGVTb3VyY2VNYXApO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBJZiB0aGVyZSdzIGEgcHJldmlvdXMgc291cmNlbWFwLCB3ZSdyZSBhbiBpbnRlcm1lZGlhdGUgbG9hZGVyIGFuZCB3ZSBoYXZlIHRvIGNoYWluIHRoZW0uXG4gICAgICAvLyBGaWxsIGluIHRoZSBpbnRlcm1lZGlhdGUgc291cmNlbWFwIHNvdXJjZSBhcyB0aGUgcHJldmlvdXMgc291cmNlbWFwIGZpbGUuXG4gICAgICBpbnRlcm1lZGlhdGVTb3VyY2VNYXAuc291cmNlcyA9IFtwcmV2aW91c1NvdXJjZU1hcC5maWxlXTtcbiAgICAgIGludGVybWVkaWF0ZVNvdXJjZU1hcC5maWxlID0gcHJldmlvdXNTb3VyY2VNYXAuZmlsZTtcblxuICAgICAgLy8gQ2hhaW4gdGhlIHNvdXJjZW1hcHMuXG4gICAgICBjb25zdCBjb25zdW1lciA9IG5ldyBTb3VyY2VNYXBDb25zdW1lcihpbnRlcm1lZGlhdGVTb3VyY2VNYXApO1xuICAgICAgY29uc3QgZ2VuZXJhdG9yID0gU291cmNlTWFwR2VuZXJhdG9yLmZyb21Tb3VyY2VNYXAoY29uc3VtZXIpO1xuICAgICAgZ2VuZXJhdG9yLmFwcGx5U291cmNlTWFwKG5ldyBTb3VyY2VNYXBDb25zdW1lcihwcmV2aW91c1NvdXJjZU1hcCkpO1xuICAgICAgbmV3U291cmNlTWFwID0gSlNPTi5zdHJpbmdpZnkoZ2VuZXJhdG9yLnRvSlNPTigpKTtcbiAgICB9XG4gIH1cblxuICB0aGlzLmNhbGxiYWNrKG51bGwsIG5ld0NvbnRlbnQsIG5ld1NvdXJjZU1hcCk7XG59XG4iXX0=