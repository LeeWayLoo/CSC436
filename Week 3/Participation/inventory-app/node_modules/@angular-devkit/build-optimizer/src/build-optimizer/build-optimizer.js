"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
const fs_1 = require("fs");
const MagicString = require('magic-string');
const transform_javascript_1 = require("../helpers/transform-javascript");
const class_fold_1 = require("../transforms/class-fold");
const import_tslib_1 = require("../transforms/import-tslib");
const prefix_functions_1 = require("../transforms/prefix-functions");
const scrub_file_1 = require("../transforms/scrub-file");
const hasDecorators = /decorators/;
const hasCtorParameters = /ctorParameters/;
const hasTsHelpers = /var (__extends|__decorate|__metadata|__param) = /;
function buildOptimizer(options) {
    options.emitSourceMap = !!options.emitSourceMap;
    const { inputFilePath, emitSourceMap, outputFilePath, strict } = options;
    let { content } = options;
    if (!inputFilePath && !content) {
        throw new Error('Either filePath or content must be specified in options.');
    }
    if (!content) {
        content = fs_1.readFileSync(inputFilePath, 'UTF-8');
    }
    // Determine which transforms to apply.
    const getTransforms = [];
    if (hasTsHelpers.test(content)) {
        getTransforms.push(import_tslib_1.getImportTslibTransformer);
    }
    if (hasDecorators.test(content) || hasCtorParameters.test(content)) {
        // Order matters, getPrefixFunctionsTransformer needs to be called before
        // getFoldFileTransformer.
        getTransforms.push(...[
            prefix_functions_1.getPrefixFunctionsTransformer,
            scrub_file_1.getScrubFileTransformer,
            class_fold_1.getFoldFileTransformer,
        ]);
    }
    if (getTransforms.length > 0) {
        // Only transform if there are transforms to apply.
        return transform_javascript_1.transformJavascript({
            content,
            getTransforms,
            emitSourceMap,
            inputFilePath,
            outputFilePath,
            strict,
        });
    }
    else if (emitSourceMap) {
        // Emit a sourcemap with no changes.
        const ms = new MagicString(content);
        return {
            content,
            sourceMap: ms.generateMap({
                source: inputFilePath,
                file: outputFilePath ? `${outputFilePath}.map` : null,
                includeContent: true,
            }),
        };
    }
    else {
        return {
            content,
            sourceMap: null,
        };
    }
}
exports.buildOptimizer = buildOptimizer;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVpbGQtb3B0aW1pemVyLmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9oYW5zbC9Tb3VyY2VzL2RldmtpdC8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL2FuZ3VsYXJfZGV2a2l0L2J1aWxkX29wdGltaXplci9zcmMvYnVpbGQtb3B0aW1pemVyL2J1aWxkLW9wdGltaXplci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBOzs7Ozs7R0FNRztBQUNILDJCQUFrQztBQUVsQyxNQUFNLFdBQVcsR0FBRyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUM7QUFFNUMsMEVBQXNFO0FBQ3RFLHlEQUFrRTtBQUNsRSw2REFBdUU7QUFDdkUscUVBQStFO0FBQy9FLHlEQUFtRTtBQUduRSxNQUFNLGFBQWEsR0FBRyxZQUFZLENBQUM7QUFDbkMsTUFBTSxpQkFBaUIsR0FBRyxnQkFBZ0IsQ0FBQztBQUMzQyxNQUFNLFlBQVksR0FBRyxrREFBa0QsQ0FBQztBQVV4RSx3QkFBK0IsT0FBOEI7SUFHM0QsT0FBTyxDQUFDLGFBQWEsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQztJQUNoRCxNQUFNLEVBQUUsYUFBYSxFQUFFLGFBQWEsRUFBRSxjQUFjLEVBQUUsTUFBTSxFQUFFLEdBQUcsT0FBTyxDQUFDO0lBQ3pFLElBQUksRUFBRSxPQUFPLEVBQUUsR0FBRyxPQUFPLENBQUM7SUFFMUIsRUFBRSxDQUFDLENBQUMsQ0FBQyxhQUFhLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQy9CLE1BQU0sSUFBSSxLQUFLLENBQUMsMERBQTBELENBQUMsQ0FBQztJQUM5RSxDQUFDO0lBRUQsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQ2IsT0FBTyxHQUFHLGlCQUFZLENBQUMsYUFBdUIsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUMzRCxDQUFDO0lBRUQsdUNBQXVDO0lBQ3ZDLE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQztJQUV6QixFQUFFLENBQUMsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMvQixhQUFhLENBQUMsSUFBSSxDQUFDLHdDQUF5QixDQUFDLENBQUM7SUFDaEQsQ0FBQztJQUdELEVBQUUsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksaUJBQWlCLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNuRSx5RUFBeUU7UUFDekUsMEJBQTBCO1FBQzFCLGFBQWEsQ0FBQyxJQUFJLENBQUMsR0FBRztZQUNwQixnREFBNkI7WUFDN0Isb0NBQXVCO1lBQ3ZCLG1DQUFzQjtTQUN2QixDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsRUFBRSxDQUFDLENBQUMsYUFBYSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzdCLG1EQUFtRDtRQUNuRCxNQUFNLENBQUMsMENBQW1CLENBQUM7WUFDekIsT0FBTztZQUNQLGFBQWE7WUFDYixhQUFhO1lBQ2IsYUFBYTtZQUNiLGNBQWM7WUFDZCxNQUFNO1NBQ1AsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDO1FBQ3pCLG9DQUFvQztRQUNwQyxNQUFNLEVBQUUsR0FBRyxJQUFJLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUVwQyxNQUFNLENBQUM7WUFDTCxPQUFPO1lBQ1AsU0FBUyxFQUFFLEVBQUUsQ0FBQyxXQUFXLENBQUM7Z0JBQ3hCLE1BQU0sRUFBRSxhQUFhO2dCQUNyQixJQUFJLEVBQUUsY0FBYyxHQUFHLEdBQUcsY0FBYyxNQUFNLEdBQUcsSUFBSTtnQkFDckQsY0FBYyxFQUFFLElBQUk7YUFDckIsQ0FBQztTQUNILENBQUM7SUFDSixDQUFDO0lBQUMsSUFBSSxDQUFDLENBQUM7UUFDTixNQUFNLENBQUM7WUFDTCxPQUFPO1lBQ1AsU0FBUyxFQUFFLElBQUk7U0FDaEIsQ0FBQztJQUNKLENBQUM7QUFDSCxDQUFDO0FBN0RELHdDQTZEQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbmltcG9ydCB7IHJlYWRGaWxlU3luYyB9IGZyb20gJ2ZzJztcbmltcG9ydCB7IFJhd1NvdXJjZU1hcCB9IGZyb20gJ3NvdXJjZS1tYXAnO1xuY29uc3QgTWFnaWNTdHJpbmcgPSByZXF1aXJlKCdtYWdpYy1zdHJpbmcnKTtcblxuaW1wb3J0IHsgdHJhbnNmb3JtSmF2YXNjcmlwdCB9IGZyb20gJy4uL2hlbHBlcnMvdHJhbnNmb3JtLWphdmFzY3JpcHQnO1xuaW1wb3J0IHsgZ2V0Rm9sZEZpbGVUcmFuc2Zvcm1lciB9IGZyb20gJy4uL3RyYW5zZm9ybXMvY2xhc3MtZm9sZCc7XG5pbXBvcnQgeyBnZXRJbXBvcnRUc2xpYlRyYW5zZm9ybWVyIH0gZnJvbSAnLi4vdHJhbnNmb3Jtcy9pbXBvcnQtdHNsaWInO1xuaW1wb3J0IHsgZ2V0UHJlZml4RnVuY3Rpb25zVHJhbnNmb3JtZXIgfSBmcm9tICcuLi90cmFuc2Zvcm1zL3ByZWZpeC1mdW5jdGlvbnMnO1xuaW1wb3J0IHsgZ2V0U2NydWJGaWxlVHJhbnNmb3JtZXIgfSBmcm9tICcuLi90cmFuc2Zvcm1zL3NjcnViLWZpbGUnO1xuXG5cbmNvbnN0IGhhc0RlY29yYXRvcnMgPSAvZGVjb3JhdG9ycy87XG5jb25zdCBoYXNDdG9yUGFyYW1ldGVycyA9IC9jdG9yUGFyYW1ldGVycy87XG5jb25zdCBoYXNUc0hlbHBlcnMgPSAvdmFyIChfX2V4dGVuZHN8X19kZWNvcmF0ZXxfX21ldGFkYXRhfF9fcGFyYW0pID0gLztcblxuZXhwb3J0IGludGVyZmFjZSBCdWlsZE9wdGltaXplck9wdGlvbnMge1xuICBjb250ZW50Pzogc3RyaW5nO1xuICBpbnB1dEZpbGVQYXRoPzogc3RyaW5nO1xuICBvdXRwdXRGaWxlUGF0aD86IHN0cmluZztcbiAgZW1pdFNvdXJjZU1hcD86IGJvb2xlYW47XG4gIHN0cmljdD86IGJvb2xlYW47XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBidWlsZE9wdGltaXplcihvcHRpb25zOiBCdWlsZE9wdGltaXplck9wdGlvbnMpOlxuICB7IGNvbnRlbnQ6IHN0cmluZywgc291cmNlTWFwOiBSYXdTb3VyY2VNYXAgfCBudWxsIH0ge1xuXG4gIG9wdGlvbnMuZW1pdFNvdXJjZU1hcCA9ICEhb3B0aW9ucy5lbWl0U291cmNlTWFwO1xuICBjb25zdCB7IGlucHV0RmlsZVBhdGgsIGVtaXRTb3VyY2VNYXAsIG91dHB1dEZpbGVQYXRoLCBzdHJpY3QgfSA9IG9wdGlvbnM7XG4gIGxldCB7IGNvbnRlbnQgfSA9IG9wdGlvbnM7XG5cbiAgaWYgKCFpbnB1dEZpbGVQYXRoICYmICFjb250ZW50KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdFaXRoZXIgZmlsZVBhdGggb3IgY29udGVudCBtdXN0IGJlIHNwZWNpZmllZCBpbiBvcHRpb25zLicpO1xuICB9XG5cbiAgaWYgKCFjb250ZW50KSB7XG4gICAgY29udGVudCA9IHJlYWRGaWxlU3luYyhpbnB1dEZpbGVQYXRoIGFzIHN0cmluZywgJ1VURi04Jyk7XG4gIH1cblxuICAvLyBEZXRlcm1pbmUgd2hpY2ggdHJhbnNmb3JtcyB0byBhcHBseS5cbiAgY29uc3QgZ2V0VHJhbnNmb3JtcyA9IFtdO1xuXG4gIGlmIChoYXNUc0hlbHBlcnMudGVzdChjb250ZW50KSkge1xuICAgIGdldFRyYW5zZm9ybXMucHVzaChnZXRJbXBvcnRUc2xpYlRyYW5zZm9ybWVyKTtcbiAgfVxuXG5cbiAgaWYgKGhhc0RlY29yYXRvcnMudGVzdChjb250ZW50KSB8fCBoYXNDdG9yUGFyYW1ldGVycy50ZXN0KGNvbnRlbnQpKSB7XG4gICAgLy8gT3JkZXIgbWF0dGVycywgZ2V0UHJlZml4RnVuY3Rpb25zVHJhbnNmb3JtZXIgbmVlZHMgdG8gYmUgY2FsbGVkIGJlZm9yZVxuICAgIC8vIGdldEZvbGRGaWxlVHJhbnNmb3JtZXIuXG4gICAgZ2V0VHJhbnNmb3Jtcy5wdXNoKC4uLltcbiAgICAgIGdldFByZWZpeEZ1bmN0aW9uc1RyYW5zZm9ybWVyLFxuICAgICAgZ2V0U2NydWJGaWxlVHJhbnNmb3JtZXIsXG4gICAgICBnZXRGb2xkRmlsZVRyYW5zZm9ybWVyLFxuICAgIF0pO1xuICB9XG5cbiAgaWYgKGdldFRyYW5zZm9ybXMubGVuZ3RoID4gMCkge1xuICAgIC8vIE9ubHkgdHJhbnNmb3JtIGlmIHRoZXJlIGFyZSB0cmFuc2Zvcm1zIHRvIGFwcGx5LlxuICAgIHJldHVybiB0cmFuc2Zvcm1KYXZhc2NyaXB0KHtcbiAgICAgIGNvbnRlbnQsXG4gICAgICBnZXRUcmFuc2Zvcm1zLFxuICAgICAgZW1pdFNvdXJjZU1hcCxcbiAgICAgIGlucHV0RmlsZVBhdGgsXG4gICAgICBvdXRwdXRGaWxlUGF0aCxcbiAgICAgIHN0cmljdCxcbiAgICB9KTtcbiAgfSBlbHNlIGlmIChlbWl0U291cmNlTWFwKSB7XG4gICAgLy8gRW1pdCBhIHNvdXJjZW1hcCB3aXRoIG5vIGNoYW5nZXMuXG4gICAgY29uc3QgbXMgPSBuZXcgTWFnaWNTdHJpbmcoY29udGVudCk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgY29udGVudCxcbiAgICAgIHNvdXJjZU1hcDogbXMuZ2VuZXJhdGVNYXAoe1xuICAgICAgICBzb3VyY2U6IGlucHV0RmlsZVBhdGgsXG4gICAgICAgIGZpbGU6IG91dHB1dEZpbGVQYXRoID8gYCR7b3V0cHV0RmlsZVBhdGh9Lm1hcGAgOiBudWxsLFxuICAgICAgICBpbmNsdWRlQ29udGVudDogdHJ1ZSxcbiAgICAgIH0pLFxuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNvbnRlbnQsXG4gICAgICBzb3VyY2VNYXA6IG51bGwsXG4gICAgfTtcbiAgfVxufVxuIl19